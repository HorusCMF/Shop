{
  "name": "elasticsearch",
  "description": "API around the ElasticSearch RESTful API -- mostly convenience.",
  "main": "index.js",
  "version": "0.3.12",
  "author": {
    "name": "Nick Campbell",
    "url": "http://github.com/ncb000gt"
  },
  "contributors": [
    {
      "name": "Nick Campbell",
      "url": "http://github.com/ncb000gt"
    },
    {
      "name": "Gabriel Farrel",
      "url": "http://github.com/gsf"
    },
    {
      "name": "Richard Marr",
      "url": "http://github.com/richmarr"
    },
    {
      "name": "Joshua Thomas",
      "url": "http://github.com/brozeph"
    },
    {
      "name": "Brian Link",
      "url": "https://github.com/cpsubrian"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "keywords": [
    "elastic",
    "search",
    "elastic search",
    "elasticsearch",
    "lucene"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/ncb000gt/node-elasticsearch.git"
  },
  "license": "MIT",
  "homepage": "http://github.com/ncb000gt/node-elasticsearch",
  "bugs": {
    "url": "http://github.com/ncb000gt/node-elasticsearch/issues"
  },
  "devDependencies": {
    "chai": "~1.7.2",
    "coveralls": "~2.0.16",
    "jscoverage": "~0.3.8",
    "jshint": "~2.1.10",
    "mocha": "~1.12.1",
    "mocha-lcov-reporter": "0.0.1",
    "stact": "~0.0.11"
  },
  "scripts": {
    "coverage": "rm -rf ./reports ; mkdir -p ./reports ; NODE_ELASTICSEARCH_COVERAGE=true mocha -R html-cov -r ./test/common.js -u bdd ./test/lib > reports/coverage.html",
    "pretest": "jshint *.js ./lib/*.js ./test/*.js ; jscoverage ./lib ./lib-cov",
    "test": "mocha --check-leaks -R spec -r ./test/common.js -u bdd ./test/lib ./test/functional",
    "posttest": "NODE_ELASTICSEARCH_COVERAGE=true mocha -R mocha-lcov-reporter -r ./test/common.js -u bdd ./test/lib | ./node_modules/coveralls/bin/coveralls.js"
  },
  "readme": "# node-elasticsearch\n\nThis is a Node.js module for the [elasticsearch](http://www.elasticsearch.org/) REST API.\n\n[![Build Status](https://travis-ci.org/ncb000gt/node-elasticsearch.png)](https://travis-ci.org/ncb000gt/node-elasticsearch) [![Coverage Status](https://coveralls.io/repos/ncb000gt/node-elasticsearch/badge.png)](https://coveralls.io/r/ncb000gt/node-elasticsearch)\n\n## Install\n\n```Javascript\nnpm install elasticsearch\n```\n\n## Usage\n\n```Javascript\nvar\n  elasticsearch = require('elasticsearch'),\n  config = {\n    _index : 'kittehs'\n  },\n  es = elasticsearch(config);\n\nes.search({\n    query : {\n      field : {\n        animal : 'kitteh'\n      }\n    }\n  }, function (err, data) {\n    // work with data here\n    // response data is according to ElasticSearch spec\n  });\n```\n\n\n## API\n\nUnless otherwise stated, all callback signatures are `function (err, data)`, with `data` being the parsed JSON response from elasticsearch.\n\n#### createClient\n\nCalling `elasticsearch.createClient(config)` is the same as `elasticsearch(config)`.\n\n```Javascript\nvar\n  elasticsearch = require('elasticsearch'),\n  es = elasticsearch.createClient(config);\n```\n\n##### config._index\n\nWhen initializing the library, you may choose to specify an index and/or type to work with at the start to save from having to supply this information in the options for each operation request:\n\n```Javascript\nvar config = {\n  _index : 'pet',\n  _type : 'kitteh'\n};\n```\n\nAdditionally, if working with multiple indexes or types, you may specify them as arrays:\n\n```Javascript\nvar config = {\n  _indices : ['pet', 'family'],\n  _types : ['kitteh', 'canine']\n};\n```\n\n*Note:* When index, indices, type or types are supplied via operation options, those settings will take precident over the base configuration for the library:\n\n```Javascript\n\nvar\n  elasticsearch = require('elasticsearch'),\n  config = {\n    _index : 'kitteh'\n  },\n  es = elasticsearch.createClient(config);\n\nes.indices.exist({ _index : 'canine' }, function (err, data) {\n  // will result in a HEAD request to /canine instead of /kitteh\n});\n```\n\n##### config.server\n\nIf omitted from configuration, the server settings default to the following:\n\n```Javascript\nvar config = {\n  // optional - when not supplied, defaults to the following:\n  server : {\n    host : 'localhost',\n    port : 9200\n  }\n};\n```\n\nAnything specified within the server element of config is passed directly through to each HTTP/HTTPS request. You may configure additional options for connecting to Elasticsearch:\n\n```Javascript\nvar config = {\n  server : {\n    agent : false,\n    auth : 'user:pass',\n    host : 'localhost',\n    port : 9243,\n    rejectUnauthorized : false,\n    secure : true // toggles between https and http\n  }\n};\n```\n\n#### cluster support and failover\n\nElasticsearch is pretty much rad at clustering. If you want to specify multiple servers to failover to, you may do so by either supplying an array as the value for the property `hosts` or `hostnames`:\n\n```Javascript\nvar elasticsearch = require('elasticsearch');\nvar config = {\n  _index : 'bawss',\n  server : {\n    hostnames : ['es1.myhost.com', 'es2.myhost.com', 'es3.myhost.com']\n    secure : true\n  }\n};\n\nvar es = elasticsearch(config);\n```\n\nIf you run on different ports for each server, use the `hosts` property:\n\n```Javascript\nvar elasticsearch = require('elasticsearch');\nvar config = {\n  _index : 'bawss',\n  server : {\n    hosts : ['localhost:9200', 'localhost:9201', 'localhost:9202']\n  }\n};\n\nvar es = elasticsearch(config);\n```\n\n#### operation timeout\n\nThe default timeout for any operation against Elasticsearch is set at 30 seconds. You can override this value by specifying a timeout property in the options for the operation:\n\n```Javascript\nvar options = {\n  timeout : 60000 // 60 seconds\n};\n\nes.bulk(options, commands, function (err, data) {\n  // teh datas\n});\n```\n\n#### request event\n\nAn event named `request` with a signature of `function (options) { }` is emitted for each API call.\n\n```Javascript\nvar elasticsearch = require('elasticsearch');\n\nvar config = {\n  _index : 'bawss',\n  server : {\n    hosts : ['localhost:9200', 'localhost:9201', 'localhost:9202']\n  }\n};\n\nvar es = elasticsearch(config);\n\nes.request.on('request', function (options) {\n  console.log('request initiated');\n  console.log(options);\n});\n\nes.count(function (err, results) {\n  // event results in request options being logged to console...\n});\n```\n\n#### options for any operation\n\nFor each ES operation, options may be specified as the first argument to the function. In most cases, these are entirely optional, but when supplied, the values specified will take precident over the config values passed to the library constructor.\nAdditionally, if there are extra option keys supplied beyond what is required for the operation, they are mapped directly to the querystring.\n\n```\nvar options = {\n  _index : 'bawss',\n  _type : 'man',\n  refresh : true\n};\n\nvar doc = {\n  field1 : 'test value'\n};\n\nes.index(options, doc, function (err, data) {\n  // this will result in a POST with path /bawss/man?refresh=true\n});\n```\n\n### Core\n\nFor more specifics and details regarding the core API for ElasticSearch, please refer to the documentation at <http://www.elasticsearch.org/guide/reference/api/>.\n\n##### Bulk\n\n*Please Note:* The default timeout is set at 30 seconds... if you are performing a large bulk insert you may need to increase this limit by specifying a higher value for `timeout` in the options parameter.\n\nThis method doesn't take into account the underlying config that was used when instantiating the client. It requires index and type to be specified via the commands array or via the options parameter. Conflict will occur if one specifies a different index and type in the options than what is specified via the commands parameter.\n\nAt a high level, when performing a bulk update, you must supply an array with an action object followed by the object that the action will use during execution. In the following example, the first item in the array specifies the action is `index` and the second item represents the data to index:\n\n```Javascript\n[\n  { index : { _index : 'dieties', _type : 'kitteh' } },\n  { name : 'hamish', breed : 'manx', color : 'tortoise' }\n]\n```\n\nIn this example, two `index` actions will be performed on the 'dieties' index and 'kitteh' type in ElasticSearch:\n\n```Javascript\n[\n  { index : { _index : 'dieties', _type : 'kitteh' } },\n  { name : 'dugald', breed : 'siamese', color : 'white' },\n  { index : { _index : 'dieties', _type : 'kitteh' } },\n  { name : 'keelin', breed : 'domestic long-hair', color : 'russian blue' }\n]\n```\n\nFor more information regarding bulk, please see the ElasticSearch documentation at <http://www.elasticsearch.org/guide/reference/api/bulk/>\n\n`es.bulk(options, commands, callback)`\n\n```Javascript\nvar\n  elasticsearch = require('elasticsearch'),\n  es = elasticsearch();\n\nvar commands = [\n  { index : { _index : 'dieties', _type : 'kitteh' } },\n  { name : 'hamish', breed : 'manx', color : 'tortoise' },\n  { index : { _index : 'dieties', _type : 'kitteh' } },\n  { name : 'dugald', breed : 'siamese', color : 'white' },\n  { index : { _index : 'dieties', _type : 'kitteh' } },\n  { name : 'keelin', breed : 'domestic long-hair', color : 'russian blue' }\n];\n\nes.bulk(commands, function (err, data) {\n  // teh datas\n});\n```\n\n##### Bulk Index\n\nThis is not a core action for ElasticSearch, but is a convenience method added to this ElasticSearch client to make bulk indexing more straight forward. Simply supply an array of documents you wish to bulk index in ElasticSearch and the method will take of the details for you.\n\n`es.bulkIndex(options, documents, callback)`\n\n```Javascript\nvar\n  elasticsearch = require('elasticsearch'),\n  es = elasticsearch();\n\nvar documents = [\n  { name : 'hamish', breed : 'manx', color : 'tortoise' },\n  { name : 'dugald', breed : 'siamese', color : 'white' },\n  { name : 'keelin', breed : 'domestic long-hair', color : 'russian blue' }\n];\n\nvar options = {\n  _index : 'dieties',\n  _type : 'kitteh'\n}\n\nes.bulkIndex(options, documents, function (err, data) {\n  // teh datas\n});\n```\n\n##### Count\n\n`es.count(options, callback)`\n\n```Javascript\nvar\n  elasticsearch = require('elasticsearch');\n  es = elasticsearch();\n\nes.count(function (err, data) {\n  // teh datas\n});\n\n// count docs in a specific index/type\nvar options = {\n  _index : 'bawss',\n  _type : 'kitteh'\n}\n\nes.count(options, function (err, data) {\n  // counted... like a bawss\n});\n```\n\n##### Delete\n\nRequires `_index` be specified either via lib config (as shown below) or via options when calling the operation.\n\n`es.delete(options, callback)`\n\n```Javascript\nvar\n  elasticsearch = require('elasticsearch'),\n  es = elasticsearch();\n\ncore.delete({ _id : 'mbQZc_XhQDWmNCQX5KwPeA' }, function (err, data) {\n  // teh datas\n});\n```\n\n##### Delete By Query\n\nRequires `_index` be specified either via lib config (as shown below) or via options when calling the operation.\n\n`es.deleteByQuery(options, query, callback)`\n\n```Javascript\nvar\n  elasticsearch = require('elasticsearch'),\n  es = elasticsearch({ _index : 'kitteh' });\n\nvar query = {\n  query : {\n    field : { breed : 'siamese' }\n  }\n};\n\nes.deleteByQuery(query, function (err, data) {\n  // teh datas\n});\n```\n\n##### Exists\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.exists(options, callback)`\n\n```Javascript\nvar\n  elasticsearch = require('elasticsearch'),\n  es = elasticsearch();\n\nes.exists({ _index : 'kitteh' }, function (err, data) {\n  // teh datas\n});\n```\n\n##### Explain\n\nRequires `_index` and `_type` be specified either via lib config or via options when calling the operation.\nAlso requires `_id`, but this must be specified via options.\n\n`es.explain(options, query, callback)`\n\n##### Get\n\nRequires `_index` and `_type` be specified either via lib config or via options when calling the operation.\nAlso requires `_id`, but this must be specified via options.\n\n`es.get(options, callback)`\n\n##### Index\n\nRequires `_index` and `_type` be specified either via lib config or via options when calling the operation.\n\n`es.index(options, doc, callback)`\n\n##### More Like This\n\nRequires `_index` and `_type` be specified either via lib config or via options when calling the operation.\nAlso requires `_id`, but this must be specified via options.\n\n`es.moreLikeThis(options, callback)`\n\n##### Multi Get\n\nIf `_index` and/or `_type` are supplied via options (or lib config), the will applied to the doc that is transmitted for the operation.\n\n`es.multiGet(options, docs, callback)`\n\n##### Multi Search\n\n`es.multiSearch(options, queries, callback)`\n\n##### Percolate\n\nRequires `_index` and `_type` be specified either via lib config or via options when calling the operation.\n\n`es.percolate(options, doc, callback)`\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\nAlso requires `name`, but this must be specified via options.\n\n`es.registerPercolator(options, query, callback)`\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\nAlso requires `name`, but this must be specified via options.\n\n`es.unregisterPercolator(options, callback)`\n\n##### Search\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.search(options, query, callback)`\n\n##### Update\n\nRequires `_index` and `_type` be specified either via lib config or via options when calling the operation.\nAlso requires `_id`, but this must be specified via options.\n\n`es.update(options, doc, callback)`\n\n##### Validate\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.validate(options, query, callback)`\n\n### Indices\n\nAll operations here interact with the indices segment of the Elasticsearch API.\n\n##### Alias\n\n`es.indices.alias(options, data, callback)`\n\n##### Aliases\n\nRequires `alias`, but this must be specified via options.\n\n`es.indices.aliases(options, callback)`\n\n##### Analyze\n\n`es.indices.analyze(options, data, callback)`\n\n##### Clear Cache\n\n`es.indices.clearCache(options, callback)`\n\n##### Close Index\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.indices.closeIndex(options, callback)`\n\n##### Create Index\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.indices.createIndex(options, data, callback)`\n\n##### Create Template\n\nRequires `name`, but this must be specified via options.\n\n`es.indices.createTemplate(options, template, callback)`\n\n##### Delete Alias\n\nRequires `_index` and `_alias` be specified either via lib config or via options when calling the operation.\n\n`es.indices.deleteAlias(opitons, callback)`\n\n##### Delete Index\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.indices.deleteIndex(options, callback)`\n\n##### Delete Mapping\n\nRequires `_index` and `_type` be specified either via lib config or via options when calling the operation.\n\n`es.indices.deleteMapping(options, callback)`\n\n##### Delete Template\n\nRequires `name`, but this must be specified via options.\n\n`es.indices.deleteTemplate(options, callback)`\n\n##### Delete Warmer\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\nAlso requires `name`, but this must be specified via options.\n\n`es.indices.deleteWarmer(options, callback)`\n\n##### Exists\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.indices.exists(options, callback)`\n\n##### Flush\n\n`es.indices.flush(options, callback)`\n\n##### Mappings\n\n`es.indices.mappings(options, callback)`\n\n##### Open Index\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.indices.openIndex(options, callback)`\n\n##### Optimize\n\n`es.indices.optimize(options, callback)`\n\n##### Put Mapping\n\nRequires `_index` and `_type` be specified either via lib config or via options when calling the operation.\n\n`es.indices.putMapping(options, mapping, callback)`\n\n##### Put Warmer\n\nRequires `name`, but this must be specified via options.\n\n`es.indices.putWarmer(options, warmer, callback)`\n\n##### Refresh\n\n`es.indices.refresh(options, callback)`\n\n##### Segments\n\n`es.indices.segments(options, callback)`\n\n##### Settings\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.indices.settings(options, callback)`\n\n##### Snapshot\n\n`es.indices.snapshot(options, callback)`\n\n##### Stats\n\n`es.indices.stats(options, callback)`\n\n##### Status\n\n`es.indices.status(options, callback`\n\n##### Templates\n\nRequires `name`, but this must be specified via options.\n\n`es.indices.templates(options, callback)`\n\n##### Update Settings\n\n`es.indices.updateSettings(options, settings, callback)`\n\n##### Warmers\n\nRequires `_index` be specified either via lib config or via options when calling the operation.\n\n`es.indices.warmers(options, callback)`\n\n### Cluster\n\nAll operations here interact with the Cluster portion of the Elasticsearch API.\n\n##### Delete River\n\nRequires `name`, but this must be specified via options.\n\n`es.cluster.deleteRiver(options, callback)`\n\n##### Field Stats\n\nRequires `field` or `fields`, but this must be specified via options.\n\n`es.cluster.fieldStats(options, callback)`\n\n##### Health\n\n`es.cluster.health(options, callback)`\n\n##### Hot Threads\n\n`es.cluster.hotThreads(options, callback)`\n\n##### Nodes Info\n\n`es.cluster.nodesInfo(options, callback)`\n\n##### Nodes Status\n\n`es.cluster.nodesStatus(options, callback)`\n\n##### Put River\n\nRequires `name`, but this must be specified via options.\n\n`es.cluster.putRiver(options, meta, callback)`\n\n##### Reroute\n\n`es.cluster.reroute(options, commands, callback)`\n\n##### Rivers\n\nRequires `name`, but this must be specified via options.\n\n`es.cluster.rivers(options, callback)`\n\n##### Settings\n\n`es.cluster.settings(options, callback)`\n\n##### Shutdown\n\n`es.cluster.shutdown(options, callback)`\n\n##### State\n\n`es.cluster.state(options, callback)`\n\n##### Update Settings\n\n`es.cluster.updateSettings(options, updates, callback)`\n\n# Testing\n\nNote that a test coverage report is sent to coveralls.io during CI... running locally will result in a response similar to `Bad response: 500 {\"message\":\"Build processing error.\",\"error\":true,\"url\":\"\"}`.\nCode coverage data generated from npm test is located in `./lib-cov` and is not included in the git repo.\n\n```Javascript\nnpm install\nnpm test\n```\n\nTo run code coverage and generate local report at `./reports/coverage.html`:\n\n```Javascript\nnpm run-script coverage\n```\n\n# Requirements\n\n* Node.js\n* elasticsearch\n* The need for search\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "elasticsearch@0.3.12",
  "dist": {
    "shasum": "402cf41f6073568eda2647fb5d8a3fa78e34904e"
  },
  "_from": "elasticsearch@",
  "_resolved": "https://registry.npmjs.org/elasticsearch/-/elasticsearch-0.3.12.tgz"
}
